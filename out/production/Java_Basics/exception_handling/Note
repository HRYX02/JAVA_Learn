1 异常体系结构
    java.lang.Throwable
        |---java.lang.Error: 一般不编写针对性的代码进行处理。
        |---java.lang.Exception: 可以进行异常的处理
            |---编译时异常(checked)
                |---IOExeception
                    |---FileNotFoundException
                |---ClassNotFoundExeception
            |---运行时异常(unchecked)
                |---NullPointerException(空指针)
                |---ArrayIndexOutOfBoundsException(角标跃进)
                |---ClassCastException(类型转换异常)
                |---NumberFormatException(数字格式化异常)
                |---InputMismatchException(输入不匹配异常)
                |---ArithmeticException(算数异常)
2 异常的处理: 抓抛模型
    过程一: "抛" :程序在正常执行过程中,一旦出现异常,就会在异常代码出生成一个对应异常类的对象.
                 并将此对象抛出.一旦抛出对象以后,其他的代码就不再执行

           关于异常的产生:  ① 系统自动生成的异常对象
                         ② 手动的生成一个异常对象，并抛出(throw)
    过程二: "抓" :可以理解为异常的处理方式: ① try-catch-finally ② throws + 异常类型
3 try-catch-finally的使用
    1 结构
        try{
            可能出现异常的代码
        }catch(异常类型1 变量名1){
            处理异常的方式1
        }catch(异常类型2 变量名2){
            处理异常的方式2
        }catch(异常类型3 变量名3){
            处理异常的方式3
        }
        ...
        finally{
            一定会执行的代码
        }
    2 说明
        2.1 finally是可选的
        2.2 使用try将可能出现异常的代码包装起来,在执行过程中,
            一旦出现异常,就会生成一个对应的异常类的对象,根据此对象的类型,
            去catch中进行匹配
        2.3 一旦try中的异常对象匹配到某一个catch时,就进入catch中进行异常的处理,
            一旦处理完成,就跳出当前的try-catch结构(在没有写finally的情况下),
            继续执行其后的代码
        2.4 catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。
            catch中的异常类型如果满足子父类系，则要求子类一定声明在父类的上面。否则，报错
        2.5 常用的异常对象处理的方式: ① String getMessage() ② printStackTrace()
        2.6 在try结构中声明的变量,再出了try结构以后,就不能再被调用
        2.7 try-catch-finally结构可以嵌套
        体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。
             相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。
        体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。
              针对于编译时异常，我们说一定要考虑异常的处理。
    3 finally的使用:
        3.1 finally是可选的
        3.2 finally中声明的是一定会被执行的代码，即使catch中出现了异常，
            try中有return语句，catch中有return语句等情况
        3.3 啥时候用finally
            像数据库连接、输入输出流、网铭编程Socket等资源，JVM是不能自动的回收的，
            我们需要自己手动的进行资源的释放。此时的资源释放，就雲要声明在千ia1ly中
4 throws + 异常类型
    1 "throws + 异常类型" 写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。
      一旦当方法体执行是，出现异常，仍会在异常处生成一个异常类的对象，此对象满足throws后异常
      类型时就会被抛出。异常代码后续的代码，就不再执行！
    2 体会：try-catch-finally:真正的将异常给处理掉了。
           throws的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉。
    3 方法重写的规则之一：
        子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型
    4 开发中如何选择使用try-catch-finally 还是使用throws？
        4.1 如果父类中被重写的方法没有用throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果
            子类重写的方法中有异常，必须使用try-catch-finally方式处理。
        4.2 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws
            的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。
5 手动抛出异常见Throw_exception_manually
6 自定义异常类
    一：继承于现有的异常结构与：RuntimeException、Exception
    二：提供全局常量：serialVersionUID
    三：提供重载构造器