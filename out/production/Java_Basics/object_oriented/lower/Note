1 Java面向对象学习的三条主线：
    1.1 Java类及类的成员：属性、方法、构造器、代码块、内部类
    1.2 面向对象的三大特征：封装性、继承性、多态性
    1.3 其他关键字
2 面向过程与面向对象
3 面向对象的两要素
    3.1类：对一类事物的描述，是抽象的、概念上的定义
    3.2对象：是实际存在的该类事物的每个个体，因而也称为实例（instance）
    >面向对象程序设计的重点是类的设计
    >设计类就是设计类的成员
        3.2.1 属性 = 成员变量 = field = 域、字段
        3.2.2 方法 = 成员方法 = method = 函数
4 创建类的对象 = 类的实例化 = 实例化类
5 类和对象的使用（面向对象思想落地的实现）
    5.1 创建类class，设计类成员
    5.2 创建类的对象
    5.3通过“对象.属性”或“对象.方法”调用对象的结构
6 如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static）
    即修改一个对象属性a，不影响另一个对象属性a的值
7 方法（main）中的变量为局部变量
8 属性（成员变量）vs 局部变量
    8.1 同
            8.1.1 定义变量的格式：数据类型 变量名 = 变量值
            8.1.2 先声明后使用
            8.1.3 变量都有其对应的作用域
    8.2 异
            8.2.1 在类中声明的位置不同：
                  属性：直接在{}中
                  局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量
            8.2.2 关于权限修饰符的不同
                  属性：可以在声明属性时，指明其权限，使用权限修饰符
               常用的权限修饰符：private、public、缺省（即Related_code 31行）、protected--->封装性
                    同一个包中的其他类，不可以调用本类中私有(private)的属性、方法
                    不同包的子类下，不能调用本类中声明为private和缺省权限的属性和方法
                    不同包的非子类/普通类下，只能调用public权限的属性和方法
                  局部变量：不可使用权限修饰符
            8.2.3 默认初始化值
                  属性：类的属性，格局其类型，都有默认初始化值
                        字符型（char）：0或‘、u0000’
                        引用数据类型（类、数组、接口）：null
                  局部变量：无默认初始化值
                           所以，调用局部变量之前，一定要显式赋值
                          形参在调用时赋值即可（例如Related_code 45行）
           8.2.4 在内存中加载的位置不同
                 属性：加载堆中 （非static）  局部变量：加载到栈中
9 类中方法的声明和使用
     9.1 声明：权限修饰符 返回值类型 方法名（形参列表）{
              方法体
              }
              9.1.1 权限修饰符（33行）
              9.1.2 返回值类型：有返回值vs无返回值
                    9.1.2.1若方法有返回值则必须在方发声明时，指明返回值的类型。
                           同时，方法中，需要使用return关键字来返回指定类型的
                           变量或常量
                    9.1.2.2如果方法没有返回值，则方法声明时，始于void表示。
                           通常，没返回值的方法中，就不用使用return。如果
                           使用只能用“return;”表示结束方法的意思
              9.1.3 方法名 见名知意
              9.1.4 形参列表：方法可以声明0个，1个或多个形参
                    格式：数据类型1 形参1，数据类型2 形参2 .....
10 return关键字
     10.1 适用范围：使用在方法体中
     10.2 作用：1：结束方法（类似break）
               2：针对于有返回值类型的方法，使用“return 数据”方法返回所要的数据
     10.3 注意：return后不可声明执行语句
11 方法的使用
     11.1方法使用中，可以调用当前类的属性和方法，但不可以定义新的方法
         特殊的：方法A中又调用了方法A：递归方法
12 内存解析
     虚拟机栈，即为平时提到的栈结构。我们将局部变量存储在栈结构中
        堆，我们将new出来的结构(比如:数组、对象)加载在对空间中。
        对象的的属性（非static）加载在堆空间中
     方法区：类的加载信息、常量池、静态域（static）
13 匿名对象的使用
     1 理解：我们创造的对象，没有显式的赋给一个变量名。即为匿名对象（eg：new 对象名）
                正常对象（对象名 变量=new 对象名）
     2 特征：匿名对象只能调用一次
14 再谈方法
     1 方法的重载（overload）
        1.1 定义：在同一个类中，允许存在一个以上的的同名方法，只要它们的参数个数或者参数类型不同即可
                “两同一不同”：同一个类，相同的方法 参数列表不同，参数个数不同，参数类型不同
        1.2 判断是否重载：跟方法的权限修饰符、返回值类型、形参变量名、方法体都没关系！
     2 可变个数形参
        2.1 格式：数据类型...变量名（参数名）
        2.2 当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个...多个。但要同一类型
        2.3 可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载
        2.4 可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。即二者无法共存
        2.5 可变个数形参在方法的形参中，必须声明在末尾
          eg: public void sxx(int i,string...str)(对)
          public void sxx(string...str,int i)(错)
     3 方法参数的值传递机制
        3.1 关于变量的赋值：
            如果变量是基本数据类型，此时赋值的是变量所保存的数据值。
            如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值
     4 方法的形参的传递机制：值传递
        1（1）形参：eg：ArrayTool的第9行
         （2）实参：eg：Related_code的29行
        2 值的传递机制
         （1）如果参数是基本数据类型，此时实参赋给形参的是实参真实储存的数据值
         （2）如果参数是引用数据类型，此时赋值的是变量所保存的数据的地址值
15 this关键字
     15.1 this可以用来修饰（调用）：属性、方法、构造器
     15.2 this修饰属性和方法：
                this理解为：当前对象或当前正在创建的对象

                在类的方法和类的构造器中，我们可以使用“this.属性”或“this.方法”的方式，调用当前对象属性或方法。
                但是，通常情况下，我们都选择省略“this.”。特殊情况下，如果方法的形参和类的属性同名时，
                我们必须显式的使用“this.变量”的方式，表明变量是属性而非形参
     15.3 this调用构造器（细节）eg：面向对象上.构造器的应用的包中
                15.3.1 规定:"this(形参列表)"必须生命在当前构造器的首行//Call to 'this()' must be first statement in constructor body
                15.3.2 我们在类的构造器中可以显示的使用"this(形参列表)"的方式，调用指定的本类中指定的的其他构造器
                15.3.3 构造器中不能通过"this(形参列表)"方式调用自己
                15.3.4 如果一个类中有n个构造器，则最多有n-1构造器使用了"this(形参列表)"
                15.3.5 构造器内部，最多只能声明一个"this(形参列表)"用来调用其他的构造器
6 package和import关键字
     package：
        1.为了更好地实现项目中类的管理，提供包的概念
        2.使用package声明类和接口所属的包，声明所属文件的首行
        3.包属于标识符，遵循标识符的命名规则、规范（小写）、见名知意
        4.每.一次就代表一层文件目录。
        补充：同一包下，不能命名同名的接口和类，不同包可以
     import：导入
        1 在源文件中显式的使用import结构导入指定包下的类和接口
        2 可以使用xxx.*的方式表示可以导入xxx包下的所有结构
        3 如果使用的类或接口是java.lang包下定义的，则可以省略import结构
        4 如果使用的类或接口是本包下定义的，则也可以省略import
        5 如果在源文件中，使用了不同包下同名的类，则必须至少有一个类需要以全类名的方式显示
        6 如果使用xxx子包下的结构仍需重新导入
        9 import static：导入指定类或接口中的静态结构----2和17行